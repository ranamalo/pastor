--- /usr/lib/python2.7/dist-packages/salt/modules/boto_vpc.py   2018-03-29 18:52:57.000000000 +0000
+++ working/modules_boto_vpc.py 2018-05-11 20:17:26.283970494 +0000
@@ -132,6 +132,8 @@
 import socket
 import time
 import random
+# pull request: wait_til_resource_exists https://github.com/saltstack/salt/pull/47618
+from time import sleep
 
 # Import Salt libs
 import salt.utils.boto
@@ -260,6 +262,9 @@
                 return {'created': True}
             else:
                 log.info('A %s with id %s was created', resource, r.id)
+                # pull request: wait_til_resource_exists https://github.com/saltstack/salt/pull/47618
+                if hasattr(r, 'id'):
+                    wait_til_resource_exists(resource_type=resource, resource_id=r.id, region=region, key=key, keyid=keyid, profile=profile)
                 _maybe_set_name_tag(name, r)
                 _maybe_set_tags(tags, r)
 
@@ -480,6 +485,26 @@
     except BotoServerError as e:
         return {'error': salt.utils.boto.get_error(e)}
 
+# pull request: wait_til_resource_exists https://github.com/saltstack/salt/pull/47618
+def wait_til_resource_exists(resource_type, resource_id, region=None, key=None, keyid=None, profile=None):
+    '''Wait for the resource to exist/be ready'''
+    resourceWaitErrorCount = 0
+    # connect to boto3
+    conn3 = _get_conn3(region=region, key=key, keyid=keyid, profile=profile)
+    # a dict to map resource types to the corresponding boto3 describe command and that command's keyword for id's
+    resource_id_argument_keyword_dict = {'vpc': { 'command': 'describe_vpcs', 'id_keyword': 'VpcIds' }, 'subnet': {'command': 'describe_subnets', 'id_keyword': 'SubnetIds' }, 'internet_gateway': { 'command': 'describe_internet_gateways', 'id_keyword': 'InternetGatewayIds' }, 'nat_gateway': { 'command': 'describe_customer_gateways', 'id_keyword': 'CustomerGatewayIds' }, 'dhcp_options': { 'command': 'describe_dhcp_options', 'id_keyword': 'DhcpOptionsIds' }, 'network_acl': { 'command': 'describe_network_acls', 'id_keyword': 'NetworkAclIds' }, 'route_table': { 'command': 'describe_route_tables', 'id_keyword': 'RouteTableIds' }, 'vpc_peering_connection': { 'command': 'describe_vpc_peering_connections', 'id_keyword': 'VpcPeeringConnectionIds' } }
+    # if it isn't in our resource_id_argument_keyword_dict ignore it because we don't know how to wait for it
+    if resource_type in list(resource_id_argument_keyword_dict.keys()):
+        kwargs = {resource_id_argument_keyword_dict[resource_type]['id_keyword']: [resource_id, ] }
+        while resourceWaitErrorCount < 10:
+            try:
+                response = getattr(conn3, resource_id_argument_keyword_dict[resource_type]['command'])(**kwargs)
+                # if the response statement above works that means it exists/is ready so break out of loop
+                break
+            except botocore.exceptions.ClientError as e:
+                log.info("Waiting for %s with id %s to be competed", resource_type, resource_id)
+                sleep(5)
+                resourceWaitErrorCount += 1
 
 def _find_vpcs(vpc_id=None, vpc_name=None, cidr=None, tags=None,
                region=None, key=None, keyid=None, profile=None):
@@ -627,6 +652,10 @@
     try:
         conn = _get_conn(region=region, key=key, keyid=keyid, profile=profile)
         vpc = conn.create_vpc(cidr_block, instance_tenancy=instance_tenancy)
+        # pull request: wait_til_resource_exists https://github.com/saltstack/salt/pull/47618
+        if hasattr(vpc, 'id'):
+            wait_til_resource_exists(resource_type='vpc', resource_id=vpc.id, region=region, key=key, keyid=keyid, profile=profile)
+
         if vpc:
             log.info('The newly created VPC id is %s', vpc.id)
 
@@ -844,7 +873,8 @@
 
 
 def create_subnet(vpc_id=None, cidr_block=None, vpc_name=None,
-                  availability_zone=None, subnet_name=None, tags=None,
+    # pull request: auto_assign_public_ipv4  https://github.com/saltstack/salt/pull/47613/files
+                  availability_zone=None, subnet_name=None, auto_assign_public_ipv4=False, tags=None,
                   region=None, key=None, keyid=None, profile=None):
     '''
     Given a valid VPC ID or Name and a CIDR block, create a subnet for the VPC.
@@ -873,10 +903,20 @@
     except BotoServerError as e:
         return {'created': False, 'error': salt.utils.boto.get_error(e)}
 
-    return _create_resource('subnet', name=subnet_name, tags=tags, vpc_id=vpc_id,
+    # pull request: wait_til_resource_exists https://github.com/saltstack/salt/pull/47618
+    subnet_object_dict = _create_resource('subnet', name=subnet_name, tags=tags, vpc_id=vpc_id,
                             availability_zone=availability_zone,
                             cidr_block=cidr_block, region=region, key=key,
                             keyid=keyid, profile=profile)
+    # pull request: wait_til_resource_exists https://github.com/saltstack/salt/pull/47618
+    if 'id' in subnet_object_dict.keys():
+        wait_til_resource_exists(resource_type='subnet', resource_id=subnet_object_dict['id'], region=region, key=key, keyid=keyid, profile=profile)
+    # pull request: auto_assign_public_ipv4  https://github.com/saltstack/salt/pull/47613/files
+    # if auto_assign_public_ipv4 is requested set that to true using boto3
+    if auto_assign_public_ipv4:
+        conn3 = _get_conn3(region=region, key=key, keyid=keyid, profile=profile)
+        conn3.modify_subnet_attribute(MapPublicIpOnLaunch={'Value': True}, SubnetId=subnet_object_dict['id'])
+    return subnet_object_dict
 
 
 def delete_subnet(subnet_id=None, subnet_name=None, region=None, key=None,
@@ -1149,6 +1189,9 @@
         r = _create_resource('internet_gateway', name=internet_gateway_name,
                              tags=tags, region=region, key=key, keyid=keyid,
                              profile=profile)
+        # pull request: wait_til_resource_exists https://github.com/saltstack/salt/pull/47618
+        if 'id' in r.keys():
+            wait_til_resource_exists(resource_type='internet_gateway', resource_id=r['id'], region=region, key=key, keyid=keyid, profile=profile)
         if r.get('created') and vpc_id:
             conn = _get_conn(region=region, key=key, keyid=keyid, profile=profile)
             conn.attach_internet_gateway(r['id'], vpc_id)
@@ -2065,10 +2108,16 @@
     if not vpc_id:
         return {'created': False, 'error': {'message': 'VPC {0} does not exist.'.format(vpc_name or vpc_id)}}
 
-    return _create_resource('route_table', route_table_name, tags=tags,
+    # pull request: wait_til_resource_exists https://github.com/saltstack/salt/pull/47618
+    route_table_object_dict = _create_resource('route_table', route_table_name, tags=tags,
                             vpc_id=vpc_id, region=region, key=key,
                             keyid=keyid, profile=profile)
 
+    # pull request: wait_til_resource_exists https://github.com/saltstack/salt/pull/47618
+    if 'id' in route_table_object_dict.keys():
+        wait_til_resource_exists(resource_type='route_table', resource_id=route_table_object_dict['id'], region=region, key=key, keyid=keyid, profile=profile)
+    return route_table_object_dict
+
 
 def delete_route_table(route_table_id=None, route_table_name=None,
                        region=None, key=None, keyid=None, profile=None):
@@ -2309,10 +2358,12 @@
                                   'must be provided.')
 
     if not _exactly_one((gateway_id, internet_gateway_name, instance_id, interface_id, vpc_peering_connection_id,
-                         nat_gateway_id, nat_gateway_subnet_id, nat_gateway_subnet_name)):
+                         # pull request: vpc_peering_connection_name https://github.com/saltstack/salt/pull/47286#issuecomment-384976734
+                         nat_gateway_id, nat_gateway_subnet_id, nat_gateway_subnet_name, vpc_peering_connection_name)):
         raise SaltInvocationError('Only one of gateway_id, internet_gateway_name, instance_id, '
                                   'interface_id, vpc_peering_connection_id, nat_gateway_id, '
-                                  'nat_gateway_subnet_id or nat_gateway_subnet_name may be provided.')
+                                  # pull request: vpc_peering_connection_name https://github.com/saltstack/salt/pull/47286#issuecomment-384976734
+                                  'nat_gateway_subnet_id, nat_gateway_subnet_name or vpc_peering_connection_name may be provided.')
 
     if destination_cidr_block is None:
         raise SaltInvocationError('destination_cidr_block is required.')
@@ -2805,6 +2856,9 @@
                 DryRun=dry_run)
         peering = vpc_peering.get('VpcPeeringConnection', {})
         peering_conn_id = peering.get('VpcPeeringConnectionId', 'ERROR')
+        # pull request: wait_til_resource_exists https://github.com/saltstack/salt/pull/47618
+        if peering_conn_id != 'ERROR':
+            wait_til_resource_exists(resource_type='vpc_peering_connection', resource_id=peering_conn_id, region=region, key=key, keyid=keyid, profile=profile)
         msg = 'VPC peering {0} requested.'.format(peering_conn_id)
         log.debug(msg)
 

